def convert_from_multiindex_to_listdataset(
    trainDF, class_val_list=None, freq="1D", startdate="1750-01-01"
):
    """
    Output a dataset in ListDataset format compatible with gluonts.
    Gluonts only supports fixed frequency at the moment.
    All instances in input data must share the same frequency i.e if instance 0 is 'H'
    all other instances must also be 'H'.

    Parameters
    ----------
    trainDF: Multiindex dataframe
        Input DF should be multi-index DataFrame.
        Level 0 is instance number
        Level 1 is timestamp
    class_val_list: str
        List of classes in case of classification dataset.
        If not available, class_val_list will show instance numbers
    Returns
    -------
    A ListDataset mtype type to be used as input for gluonts models/estimators

    Examples
    --------
    >>> import os
    >>> import sktime
    >>> from sktime.datasets import load_from_tsfile_to_dataframe
    >>> from gluonts.dataset.common import ListDataset
    >>> import pandas as pd
    >>> import numpy as np
    >>> from sktime.datatypes import convert_to
    >>> from sktime.datatypes import check_raise

    >>> DATA_PATH = os.path.join(os.path.dirname(sktime.__file__), "datasets/data")
    >>> train_x, train_y = load_from_tsfile_to_dataframe(
    ... os.path.join(DATA_PATH, "ArrowHead/ArrowHead_TRAIN.ts"))

    >>> train_x_multi = convert_to(train_x, to_type="pd-multiindex")
    >>> listdataset = load_from_multiindex_to_listdataset(train_x_multi, train_y)
    """
    import numpy as np
    import pandas as pd

    # New dependency from Gluon-ts
    from gluonts.dataset.common import ListDataset

    from sktime.datatypes import convert_to

    # Convert to nested_univ format
    trainDF = convert_to(trainDF, to_type="nested_univ")
    trainDF = trainDF.reset_index().drop(["instances"], axis=1)

    num_dimensions = len(trainDF.columns)
    dimension_name = trainDF.columns
    if class_val_list is not None:
        feat_static_cat = class_val_list
    else:
        # If not available, class_val_list will show instance numbers
        feat_static_cat = list(np.arange(len(trainDF)))
    if num_dimensions > 1:
        one_dim_target = False
    else:
        one_dim_target = True

    # Arbitrary start date
    dummy_start = [pd.Timestamp(startdate) for _ in range(len(trainDF))]
    all_instance_list = []
    for instance, _dim_name in enumerate(trainDF):
        one_instance_list = []
        for dim in range(num_dimensions):
            tmp = list(trainDF.loc[instance, dimension_name[dim]].to_numpy())
            one_instance_list.append(tmp)
        if one_dim_target is True:
            flatlist = [element for sublist in one_instance_list for element in sublist]
            all_instance_list.append(flatlist)
        else:
            all_instance_list.append(one_instance_list)
    train_ds = ListDataset(
        [
            {"target": target, "start": start, "fea_static_cat": [fsc]}
            for (target, start, fsc) in zip(
                all_instance_list, dummy_start, feat_static_cat
            )
        ],
        freq=freq,
        one_dim_target=one_dim_target,
    )
    return train_ds
